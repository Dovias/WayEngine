package lt.wayout.minecraft.plugin.wayengine.ui.listener;

import com.google.common.base.Preconditions;

import lt.wayout.minecraft.plugin.wayengine.ui.*;
import lt.wayout.minecraft.plugin.wayengine.ui.container.GUIContainerElement;
import lt.wayout.minecraft.plugin.wayengine.ui.container.GUIContainerHandlingType;
import lt.wayout.minecraft.plugin.wayengine.ui.container.GUIContainerItem;
import lt.wayout.minecraft.plugin.wayengine.ui.container.ServerGUIContainerView;
import org.bukkit.entity.Player;
import org.bukkit.event.EventHandler;
import org.bukkit.event.Listener;
import org.bukkit.event.inventory.InventoryAction;
import org.bukkit.event.inventory.InventoryClickEvent;
import org.bukkit.event.inventory.InventoryDragEvent;
import org.bukkit.inventory.InventoryView;
import org.bukkit.inventory.ItemStack;
import org.bukkit.scheduler.BukkitRunnable;

import java.util.Map;
import java.util.Set;

public class ContainerInventoryListener implements Listener {
    private final UIManager manager;

    public ContainerInventoryListener(UIManager manager) {
        this.manager = Preconditions.checkNotNull(manager, "GUIManager object cannot be null!");
    }

    @EventHandler
    public void onInventoryClick(InventoryClickEvent event) {
        UIContainerView view = this.manager.getRegisteredUI(event.getWhoClicked().getUniqueId());
        if (!(view instanceof GUIContainerView containerView)) return;
        InventoryAction action = event.getAction();
        if (action == InventoryAction.UNKNOWN) {
            event.setCancelled(true);
            return;
        }
        Player player = (Player)event.getWhoClicked();

        GUIContainerElement element = containerView.getElement(event.getRawSlot());
        if (element == null) {
            GUIContainerHandlingType handlingType = containerView.getContainer().getHandlingType();
            InventoryView bukkitView = event.getView();
            switch (handlingType) {
            case NONE: {
                event.setCancelled(true);
                return;
            } case PLAYER_INVENTORY_ACTIONS: {
                if (action == InventoryAction.MOVE_TO_OTHER_INVENTORY) {
                    event.setCancelled(true);
                } else if (action == InventoryAction.COLLECT_TO_CURSOR) {
                    break;
                } else if (event.getRawSlot() < containerView.getContainer().getSize()) {
                    event.setCancelled(true);
                }
                return;
            } case ALL_RECALCULATED_ACTIONS: {
                if (action == InventoryAction.MOVE_TO_OTHER_INVENTORY) {
                    int[] itemSlots = new int[containerView.getContainer().getSize()];
                    int slotAmount = 0;
                    int airSlot = -1;

                    ItemStack item = event.getCurrentItem();
                    if (event.getRawSlot() < itemSlots.length) {
                        for (int i = itemSlots.length; i < containerView.getSize(); i++) {
                            if (containerView.hasElement(i)) continue;
                            ItemStack viewItem = bukkitView.getItem(i);
                            if (viewItem == null) {
                                airSlot = i;
                            } else if (viewItem.isSimilar(item) && viewItem.getAmount() != viewItem.getMaxStackSize()) {
                                itemSlots[slotAmount++] = i;
                            }
                        }
                    } else {
                        for (int i = itemSlots.length; --i > -1; ) {
                            if (containerView.hasElement(i)) continue;
                            ItemStack viewItem = bukkitView.getItem(i);
                            if (viewItem == null) {
                                airSlot = i;
                            } else if (viewItem.isSimilar(item) && viewItem.getAmount() != viewItem.getMaxStackSize()) {
                                itemSlots[slotAmount++] = i;
                            }
                        }
                    }
                    if (slotAmount == 0 && airSlot == -1) {
                        event.setCancelled(true);
                        return;
                    }
                    for (int i = slotAmount; item.getAmount() > 0 && --i > -1; ) {
                        ItemStack viewItem = bukkitView.getItem(itemSlots[i]);
                        int addAmount = Math.min(viewItem.getMaxStackSize() - viewItem.getAmount(), item.getAmount());
                        viewItem.add(addAmount);
                        item.subtract(addAmount);
                    }
                    if (airSlot != -1) {
                        bukkitView.setItem(airSlot, item);
                        bukkitView.setItem(event.getRawSlot(), null);
                    }
                    return;
                } else if (action == InventoryAction.COLLECT_TO_CURSOR) {
                    break;
                }
            } default: {
                return;
            }}
            ItemStack item = event.getCursor();

            int viewSize = containerView.getSize();
            for (int i = 0; i < viewSize; i++) {
                GUIContainerElement guiElement = containerView.getElement(i);
                if (guiElement instanceof GUIContainerItem containerItem && containerItem.getItemStack().isSimilar(item)) {
                    player.sendMessage("Found elements in view! Cancelling event!");
                    event.setCancelled(true);
                    break;
                }
            }
            ItemStack[] fullItemStacks = new ItemStack[viewSize];
            int fullItemStackAmount = 0;

            for (int i = 0; i < viewSize; i++) {
                if (item.getAmount() == 0) return;
                ItemStack viewItem = bukkitView.getItem(i);
                if (viewItem == null || containerView.hasElement(i) || !viewItem.isSimilar(viewItem)) continue;
                if (viewItem.getAmount() == viewItem.getMaxStackSize()) {
                    fullItemStacks[fullItemStackAmount++] = viewItem;
                    continue;
                }
                int addAmount = Math.min(item.getMaxStackSize() - item.getAmount(), viewItem.getAmount());
                item.add(addAmount);
                viewItem.subtract(addAmount);
            }
            for (int i = 0; item.getAmount() != 0 && i < fullItemStackAmount; i++) {
                ItemStack viewItem = fullItemStacks[i];
                int addAmount = Math.min(item.getMaxStackSize() - item.getAmount(), viewItem.getAmount());
                item.add(addAmount);
                viewItem.subtract(addAmount);
            }
        }
        event.setCancelled(true);
        if (element.testPlayer(player)) element.invoke(containerView, event.getClick(), (Player)event.getWhoClicked());
    }

    @EventHandler
    public void onInventoryDrag(InventoryDragEvent event) {
        UIContainerView view = this.manager.getRegisteredUI(event.getWhoClicked().getUniqueId());
        if (!(view instanceof GUIContainerView containerView)) return;
        switch (containerView.getContainer().getHandlingType()) {
        case NONE -> event.setCancelled(true);
        case PLAYER_INVENTORY_ACTIONS -> {
            InventoryView bukkitView = event.getView();
            int containerLastSlot = containerView.getContainer().getSize();

            Set<Integer> itemSlots = event.getRawSlots();
            for (Integer itemSlot : itemSlots) {
                if (itemSlot < containerLastSlot || containerView.hasElement(itemSlot)) {
                    event.setCancelled(true);
                    return;
                }
            }
        } case ALL_RECALCULATED_ACTIONS -> {
            InventoryView bukkitView = event.getView();

            Map<Integer, ItemStack> draggedItems = event.getNewItems();
            for (Integer itemSlot : draggedItems.keySet()) {
                if (containerView.hasElement(itemSlot)) {
                    event.setCancelled(true);
                    break;
                }
            }
            if (!event.isCancelled()) return;
            new BukkitRunnable() {
                @Override
                public void run() {
                    int amount = bukkitView.getCursor().getAmount() / draggedItems.size();
                    for (Map.Entry<Integer, ItemStack> itemEntry : draggedItems.entrySet()) {
                        if (containerView.hasElement(itemEntry.getKey())) continue;
                        bukkitView.setItem(itemEntry.getKey(), itemEntry.getValue());
                        bukkitView.getCursor().subtract(amount);
                    }
                    event.getWhoClicked().sendMessage(String.valueOf(amount));
                }
            }.runTaskLater(this.manager.getPlugin(), 1);
        }}
    }

    private boolean viewHasItemStack(GUIContainerView view, ItemStack itemStack) {
        int containerSize = view.getSize();
        for (int i = 0; i < containerSize; i++) {
            if (view.getElement(i) instanceof GUIContainerItem containerItem &&
                containerItem.getItemStack().isSimilar(itemStack)) return true;
        }
        return false;
    }

    /*

     */
}
